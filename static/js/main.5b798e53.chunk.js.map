{"version":3,"sources":["components/Cards/Cards.module.css","components/Spinner/Spinner.js","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","img/spinner.gif","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","src","spinner","style","width","margin","display","alt","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","Number","value","duration","separator","Date","toDateString","Spinner","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","total","date","reportDate","fetchCountries","countries","mappedValue","name","Chart","useState","dailyData","setDailyData","useEffect","fetch","lineChart","labels","datasets","label","borderColor","fill","barChart","backgroundColor","options","legend","title","text","CountryPicker","countryChanged","setCountry","res","getCountry","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","setData","fetchedData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b798e53.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3VqbZ\",\"card\":\"Cards_card__1MHD1\",\"infected\":\"Cards_infected__2XbVZ\",\"recovered\":\"Cards_recovered__t67wU\",\"deaths\":\"Cards_deaths__KvmiJ\"};","import React,{Fragment} from 'react';\r\nimport spinner from '../../img/spinner.gif';\r\n\r\nexport default () => {\r\n    return (\r\n        <Fragment>\r\n            <img\r\n            src={spinner}\r\n            style={{width:'200px',margin:'auto',display:'block'}}\r\n            alt='loading..'\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\r\n\r\n    if(!confirmed)\r\n    {\r\n        return (<Spinner />);\r\n    }\r\n    console.log(confirmed);\r\n    console.log(recovered);\r\n    console.log(deaths);\r\n    console.log(lastUpdate);\r\n    return (\r\n        <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                    <Typography variant=\"h5\" >\r\n                    <CountUp start={0} end={Number(confirmed.value)} duration={1.5} separator=\",\" />\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\" >Number of active cases of COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                    <Typography variant=\"h5\" >\r\n                    <CountUp start={0} end={Number(recovered.value)} duration={1.5} separator=\",\" />\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\" >Number of Recoveries of COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                    <Typography variant=\"h5\" >\r\n                    <CountUp start={0} end={Number(deaths.value)} duration={1.5} separator=\",\" />\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\" >Number of Death of COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n        </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl=url;\r\n    if(country && country!=='global')\r\n    {\r\n        changeableUrl=`${url}/countries/${country}`;\r\n    }\r\n    console.log(changeableUrl);\r\n    try {\r\n        const {data:{\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        }} = await axios.get(changeableUrl);\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate}\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n} \r\n\r\nexport const fetchDailyData= async ()=>{\r\n    try {\r\n        const {data}= await axios.get(`${url}/daily`);\r\n        // console.log(data);\r\n        const modifiedData= data.map((data)=>({\r\n            confirmed: data.confirmed.total,\r\n            deaths:data.deaths.total,\r\n            date:data.reportDate\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);    }\r\n}\r\n\r\nexport const fetchCountries = async() =>\r\n{\r\n    try {\r\n        const {data:{countries}}= await axios.get(`${url}/countries`);\r\n        const mappedValue=countries.map(country=>country.name);\r\n        return mappedValue;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nconst Chart = ({data:{confirmed,recovered,deaths,lastUpdate,country}}) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const dailyData = await fetchDailyData();\r\n      setDailyData(dailyData);\r\n        // console.log(dailyData);\r\n    };\r\n    fetch();\r\n\r\n  }, []);\r\n  const lineChart= (\r\n      typeof(dailyData)!=='undefined'?(<Line \r\n        data={{\r\n            labels:dailyData.map(({date})=>date),\r\n            datasets:[{\r\n                data: dailyData.map(({confirmed})=>confirmed),\r\n                label: 'Infected',\r\n                borderColor:'red',\r\n                fill:true\r\n            },{\r\n                data: dailyData.map(({deaths})=>deaths),\r\n                label: 'Deaths',\r\n                borderColor:'blue',\r\n                fill:true\r\n            }]\r\n        }} />) : <Spinner />\r\n  );\r\n\r\n  const barChart = (\r\n    typeof(confirmed)!=='undefined'?(\r\n      <Bar \r\n        data={{\r\n          labels:['Infected','Recovered','Deaths'],\r\n          datasets:[\r\n            {label:'People',\r\n            backgroundColor:['blue','green','red'],\r\n            data:[confirmed.value,recovered.value,deaths.value]}\r\n          ]\r\n        }}\r\n        options={{\r\n          legend:{display:false},\r\n          title:{display:true,text:`Current State in ${country}`}\r\n        }}\r\n      />\r\n    ) : <Spinner />\r\n  )    \r\n\r\n if(!confirmed)\r\n {\r\n     return (<Spinner />);\r\n }\r\n  return (\r\n    <div className={styles.container}>\r\n    {country!=='global'? barChart:lineChart}\r\n    \r\n    </div>\r\n  );\r\n}; \r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from './CountryPicker.module.css'\r\nimport {fetchCountries} from '../../api/index';\r\n\r\nconst CountryPicker = ({countryChanged}) => {\r\n    const [country,setCountry] = useState([]);\r\n    useEffect(()=>{\r\n        const getCountry = async()=>\r\n        {\r\n            const res = await fetchCountries();\r\n            console.log(res);\r\n            setCountry(res);\r\n        }\r\n        getCountry();\r\n    },[])\r\n\r\n  return (\r\n    <div >\r\n      <FormControl className={styles.formControl}>\r\n          <NativeSelect defaultValue=\"\" onChange={e=>countryChanged(e.target.value)}>\r\n              <option value=\"global\">Global</option>\r\n              {country.map((country,i)=>(\r\n                  <option key={i}>{country}</option>\r\n              ))}\r\n          </NativeSelect>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, {useEffect,useState} from 'react'\r\nimport {Cards,Chart,CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api/index'; \r\n\r\n const App = () => {\r\n    const [data,setData]= useState({\r\n        confirmed:'',\r\n        recovered:'',\r\n        deaths:'',\r\n        lastUpdate:'',\r\n        country:'global'\r\n    });\r\n     useEffect( ()=>{\r\n          const fetch=async()=>{\r\n             \r\n                const data= await fetchData();\r\n                setData({...data,country:'global'});\r\n         }\r\n         fetch();\r\n     },[]);\r\n\r\n    const countryChanged = async(country)=>{\r\n        const fetchedData= await fetchData(country);\r\n        console.log(country);\r\n        console.log(fetchedData);\r\n        setData({...fetchedData,country:country});\r\n        //fetch data then set state\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <h1>Corona Tracker</h1>\r\n            <Cards data={data}/>\r\n            <CountryPicker countryChanged={countryChanged}  />\r\n            <Chart data={data} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nReactDOM.render(<App></App>,document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/spinner.26ef8bb4.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__19fUU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2ds7a\",\"container\":\"CountryPicker_container__1aE8F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1BuPC\"};"],"sourceRoot":""}